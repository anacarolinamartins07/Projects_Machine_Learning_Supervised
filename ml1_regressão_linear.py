# -*- coding: utf-8 -*-
"""ML1- Regressão Linear

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MhRIqhkkiHGLpARxjRd0nixR1nV6wMhY
"""

#ml supervisionado fazer previsoes com regressao linear

import pandas as pd

df= pd.read_csv("/content/insurance.csv")

print(df)

df.head(8)

df.describe()

#PRÉ PROCESSAMENTO

df ["sex"]= df["sex"].map({"female":0, "male":1})

df ["smoker"] = df["smoker"].map({"yes":1, "no":0})

df.head(5)

#df["charges"] = df["charges" 1/1000]

#MODELAGEM DE DADOS (regressao pois vamos trabalhar com dados numéricos e não classificacao com sim ou nao)

from sklearn.linear_model import LinearRegression

x= df[['bmi']] #um colchete um vetor, dois colchetes uma matriz, pois ele esta esperando uma entrada com varias informacoes, todo modelo de regressao precisa de dois colchetes
y= df['charges'] #so um colchete pois é um valor apenas na saida

regressao= LinearRegression()
#regressao.fit está encontrando os betas (coeficientes, b1, b2,b3)
regressao.fit(x,y)

#y = b0 + b1 * x
#y= b0 + b1* x1 + b2*x2 (cada b corresponde a cada x)
b0= regressao.intercept_
print(b0)
b1= regressao.coef_[0] #para acessar cada indice do vetor caso tenha varios betas
print(b1)

#IMC = 25

custo= 1192.9372089611497 +393.87303079739524 * IMC
print(custo)

#def custo_medico(imc):
  custo= b0 + b1 + imc
  return print("seu custo medico é de $",custo)

#custo_medico(40)

#VALIDAÇAO

#tecnica hold out

from sklearn.model_selection import train_test_split

xtreino , xteste, ytreino, yteste = train_test_split (x, y,test_size= 0.25)

xtreino

#erro quadratico medio


regressao = LinearRegression()

regressao.fit(xtreino,ytreino)

regressao.intercept_ #b0

y_hat= regressao.predict(xteste) #o erro que ele previu no xteste ou seja os custos

#CALCULAR ERRO QUADRATICO MEDIO (mean square error - mse) NOS DADOS DE TESTE
from sklearn.metrics import mean_squared_error

eqm= mean_squared_error(yteste, y_hat)

print(eqm)

#tentando melhorar o modelo

x= df[["bmi","smoker","age"]]
y= df["charges"]/1000

#tecnica hold out

from sklearn.model_selection import train_test_split

xtreino, xteste, ytreino, yteste= train_test_split(x,y, test_size=0.25)

#modelagem
from sklearn.linear_model import LinearRegression

reg= LinearRegression()

reg.fit(xtreino,ytreino)

len(xteste)

y_hat= reg.predict(xteste)
print(y_hat)

# calculando o erro de previsao do modelo
from sklearn.metrics import mean_squared_error

eqm = mean_squared_error(yteste, y_hat)
print("O erro quadrático médio foi: ",round(eqm))

#O erro quadrático médio foi mais eficiente com duas informacoes divido por 1000 fica melhor